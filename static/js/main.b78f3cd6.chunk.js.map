{"version":3,"sources":["components/card/card.module.css","components/home/home.module.css","components/favs/favs.module.css","components/login/login.module.css","components/Loader.js","components/PrivateRoute.js","components/card/Card.js","firebase.js","redux/charsDuck.js","components/home/HomePage.js","components/favs/FavPage.js","redux/userDuck.js","components/login/LoginPage.js","Routes.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","Loader","css","color","connect","user","loggedIn","fetching","redirectTo","routerProps","to","onClick","side","console","log","Card","name","image","rightClick","leftClick","actions","className","styles","container","card","alt","src","left","size","right","defaultProps","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","collection","client","ApolloClient","uri","initialData","array","favorites","error","nextPage","fetchCharsAction","dispatch","getState","type","query","gql","chars","variables","page","then","data","payload","characters","results","info","next","setupFavoritesAction","uid","doc","get","snap","getFavorites","catch","err","message","state","char","nextChar","length","slice","addToFavorites","set","updateFavorites","map","i","key","id","getSessionAction","Promise","resolve","reject","auth","onAuthStateChanged","googleLoginAction","provider","GoogleAuthProvider","signInWithPopup","loginWithGoogle","logoutAction","signOut","cleanFavoritesAction","Routes","exact","path","component","Home","FavPage","LoginPage","App","activeClassName","Boolean","window","location","hostname","match","storeConfig","combineReducers","action","displayName","photoURL","email","undefined","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","genStore","store","createStore","WithRouter","basename","WithRedux","WithApollo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b78f3cd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__3NdGe\",\"card\":\"card_card__-S-Zt\",\"name\":\"card_name__1x3Wm\",\"actions\":\"card_actions__1F14G\",\"left\":\"card_left__15YBr\",\"right\":\"card_right__30xzM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__3b_Hh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"favs_container__1GD2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container__27O45\"};","import React from 'react';\r\nimport PacmanLoader from 'react-spinners/PacmanLoader';\r\n\r\nconst Loader = () => {\r\n    const override = `\r\n        display: block;\r\n        margin: 0 auto;\r\n    `;\r\n    return <PacmanLoader css={override} color={'lightseagreen'} />;\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Loader from './Loader';\r\n\r\nfunction PrivateRoute({ loggedIn, fetching, redirectTo, ...routerProps }) {\r\n    if (fetching) {\r\n        return <Loader />;\r\n    } else if (loggedIn) {\r\n        return <Route {...routerProps} />;\r\n    } else {\r\n        return <Redirect to={redirectTo} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ user: { loggedIn, fetching } }) => ({\r\n    loggedIn,\r\n    fetching,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport styles from './card.module.css';\r\nimport FontAwesome from 'react-fontawesome';\r\nimport PropTypes from 'prop-types';\r\n\r\nlet rick = 'https://rickandmortyapi.com/api/character/avatar/1.jpeg';\r\n\r\nfunction onClick(side) {\r\n    return () => console.log(side);\r\n}\r\n\r\nexport default function Card({\r\n    name,\r\n    image,\r\n    rightClick,\r\n    leftClick,\r\n    actions = true,\r\n}) {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.card}>\r\n                <img alt=\"rick\" src={image} />\r\n                <p className={styles.name}>{name}</p>\r\n                {actions && (\r\n                    <div className={styles.actions}>\r\n                        <div\r\n                            onClick={leftClick || onClick('left')}\r\n                            className={styles.left}\r\n                        >\r\n                            <FontAwesome name=\"thumbs-down\" size=\"2x\" />\r\n                        </div>\r\n                        <div\r\n                            onClick={rightClick || onClick('right')}\r\n                            className={styles.right}\r\n                        >\r\n                            <FontAwesome name=\"heart\" size=\"2x\" />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nCard.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    leftClick: PropTypes.func,\r\n    rightClick: PropTypes.func,\r\n};\r\n\r\nCard.defaultProps = {\r\n    name: 'Rick Sanches',\r\n    image: rick,\r\n};\r\n","import firebase from 'firebase';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: 'AIzaSyBo2wNZxge0JUWT1R5ktYG35emkvT7yigw',\r\n    authDomain: 'cursoreactgraphql.firebaseapp.com',\r\n    databaseURL: 'https://cursoreactgraphql.firebaseio.com',\r\n    projectId: 'cursoreactgraphql',\r\n    storageBucket: 'cursoreactgraphql.appspot.com',\r\n    messagingSenderId: '940777115619',\r\n    appId: '1:940777115619:web:ce283ebfece26cf2189ad6',\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport function loginWithGoogle() {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    return firebase\r\n        .auth()\r\n        .signInWithPopup(provider)\r\n        .then(({ user }) => user);\r\n}\r\n\r\nexport function getLoggedUser() {\r\n    return new Promise((resolve, reject) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                resolve(user);\r\n            } else {\r\n                reject('The user is not logged in');\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport function logout() {\r\n    return firebase.auth().signOut();\r\n}\r\n\r\nconst db = firebase.firestore().collection('favorites');\r\n\r\nexport function updateFavorites(array, uid) {\r\n    db.doc(uid).set({ array });\r\n}\r\n\r\nexport function getFavorites(uid) {\r\n    return db\r\n        .doc(uid)\r\n        .get()\r\n        .then((snap) => snap.data() ? snap.data().array : []);\r\n}\r\n","import { updateFavorites, getFavorites } from '../firebase';\r\n\r\nimport ApolloClient, { gql } from 'apollo-boost';\r\n\r\n// Constants\r\nconst UPDATE_NEXT_PAGE = 'UPDATE_NEXT_PAGE';\r\n\r\nconst FETCH_CHARS = 'FETCH_CHARS';\r\nconst FETCH_CHARS_SUCCESS = 'FETCH_CHARS_SUCCESS';\r\nconst FETCH_CHARS_ERROR = 'FETCH_CHARS_ERROR';\r\n\r\nconst NEXT_CHAR = 'NEXT_CHAR';\r\n\r\nconst ADD_TO_FAVORITES = 'ADD_TO_FAVORITES';\r\nconst GET_FAVORITES = 'GET_FAVORITES';\r\nconst GET_FAVORITES_SUCCESS = 'GET_FAVORITES_SUCCESS';\r\nconst GET_FAVORITES_ERROR = 'GET_FAVORITES_ERROR';\r\nconst CLEAN_FAVORITES_ACTION = 'CLEAN_FAVORITES_ACTION';\r\n\r\n// const API_URL = 'https://rickandmortyapi.com/api/character/';\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'https://rickandmortyapi.com/graphql',\r\n});\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    favorites: [],\r\n    error: null,\r\n    nextPage: 1,\r\n};\r\n\r\n// Reducer\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case UPDATE_NEXT_PAGE:\r\n            return { ...state, nextPage: action.payload };\r\n        case FETCH_CHARS:\r\n            return { ...state, fetching: true };\r\n        case FETCH_CHARS_SUCCESS:\r\n            return { ...state, fetching: false, array: action.payload };\r\n        case FETCH_CHARS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload };\r\n        case NEXT_CHAR:\r\n            return { ...state, array: action.payload };\r\n        case ADD_TO_FAVORITES:\r\n            return { ...state, ...action.payload };\r\n        case GET_FAVORITES:\r\n            return { ...state, fetching: true };\r\n        case GET_FAVORITES_SUCCESS:\r\n            return { ...state, fetching: false, favorites: action.payload };\r\n        case GET_FAVORITES_ERROR:\r\n            return { ...state, fetching: false, error: action.payload };\r\n        case CLEAN_FAVORITES_ACTION:\r\n            return { ...state, favorites: null };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Actions (thunks)\r\nexport const fetchCharsAction = () => (dispatch, getState) => {\r\n    dispatch({ type: FETCH_CHARS });\r\n\r\n    const query = gql`\r\n        query($page: Int) {\r\n            characters(page: $page) {\r\n                info {\r\n                    pages\r\n                    next\r\n                    prev\r\n                }\r\n                results {\r\n                    name\r\n                    image\r\n                }\r\n            }\r\n        }\r\n    `;\r\n\r\n    const { nextPage } = getState().chars;\r\n\r\n    return client\r\n        .query({\r\n            query,\r\n            variables: { page: nextPage },\r\n        })\r\n        .then(({ data, error }) => {\r\n            if (!error) {\r\n                dispatch({\r\n                    type: FETCH_CHARS_SUCCESS,\r\n                    payload: data.characters.results,\r\n                });\r\n                dispatch({\r\n                    type: UPDATE_NEXT_PAGE,\r\n                    payload: data.characters.info.next || 1,\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FETCH_CHARS_ERROR,\r\n                    payload: error,\r\n                });\r\n            }\r\n        });\r\n};\r\n\r\nexport const nextCharAction = () => (dispatch, getState) => {\r\n    const { array: chars, fetching } = getState().chars;\r\n\r\n    if (!fetching) {\r\n        if (chars.length === 1) {\r\n            fetchCharsAction()(dispatch, getState);\r\n            return;\r\n        }\r\n\r\n        dispatch({\r\n            type: NEXT_CHAR,\r\n            payload: chars.slice(1),\r\n        });\r\n    }\r\n};\r\n\r\nexport const addToFavoritesAction = () => (dispatch, getState) => {\r\n    const { array, favorites } = getState().chars;\r\n    const { uid } = getState().user;\r\n\r\n    updateFavorites(favorites, uid);\r\n    dispatch({\r\n        type: ADD_TO_FAVORITES,\r\n        payload: {\r\n            array: array.slice(1),\r\n            favorites: [...favorites, array[0]],\r\n        },\r\n    });\r\n};\r\n\r\nexport const setupFavoritesAction = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: GET_FAVORITES,\r\n    });\r\n\r\n    const { uid } = getState().user;\r\n\r\n    getFavorites(uid)\r\n        .then((favorites) => {\r\n            dispatch({\r\n                type: GET_FAVORITES_SUCCESS,\r\n                payload: favorites,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: GET_FAVORITES_ERROR,\r\n                payload: err.message,\r\n            });\r\n        });\r\n};\r\n\r\nexport const cleanFavoritesAction = () => (dispatch) => {\r\n    dispatch({\r\n        type: CLEAN_FAVORITES_ACTION,\r\n    });\r\n};\r\n","import React from 'react';\r\nimport Card from '../card/Card';\r\nimport Loader from '../Loader';\r\nimport styles from './home.module.css';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { nextCharAction, addToFavoritesAction } from '../../redux/charsDuck';\r\n\r\nconst Home = ({ char, fetching, nextChar, addToFavorites }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2>Personajes de Rick y Morty</h2>\r\n            <div>\r\n                {fetching ? (\r\n                    <Loader />\r\n                ) : (\r\n                    <Card\r\n                        leftClick={nextChar}\r\n                        rightClick={addToFavorites}\r\n                        {...char}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    char: state.chars.array[0],\r\n    fetching: state.chars.fetching,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    nextChar: nextCharAction,\r\n    addToFavorites: addToFavoritesAction,\r\n})(Home);\r\n","import React from 'react';\r\nimport styles from './favs.module.css';\r\nimport Card from '../card/Card';\r\nimport Loader from '../Loader';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction FavPage({ favorites, fetching }) {\r\n\r\n    function renderCharacter(char, i) {\r\n        return <Card key={char.id} {...char} actions={false} />;\r\n    }\r\n\r\n    if (fetching) {\r\n        return <Loader/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2>Favoritos</h2>\r\n            {favorites.map(renderCharacter)}\r\n            {!favorites.length && <h3>No hay personajes agregados</h3>}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ chars: { favorites, fetching } }) => {\r\n    return { favorites, fetching };\r\n};\r\n\r\nexport default connect(mapStateToProps)(FavPage);\r\n","import { loginWithGoogle, getLoggedUser, logout } from '../firebase';\r\nimport { setupFavoritesAction, cleanFavoritesAction } from './charsDuck';\r\n\r\n// Constants\r\nconst LOGIN = 'LOGIN';\r\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nconst LOGIN_ERROR = 'LOGIN_ERROR';\r\n\r\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nconst LOGOUT_ERROR = 'LOGOUT_ERROR';\r\n\r\n// The initial data object is important because the reducer\r\n// is called once the store is created, and the state is\r\n// undefined when that happens.\r\nlet initialData = {\r\n    loggedIn: false,\r\n    fetching: false,\r\n};\r\n\r\n// Reducer\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return { ...state, fetching: true };\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                fetching: false,\r\n                loggedIn: true,\r\n                uid: action.payload.uid,\r\n                displayName: action.payload.displayName,\r\n                photoURL: action.payload.photoURL,\r\n                email: action.payload.email,\r\n            };\r\n        case LOGIN_ERROR:\r\n            return { ...state, fetching: false, error: action.payload };\r\n        case LOGOUT_SUCCESS:\r\n            return initialData;\r\n        case LOGOUT_ERROR:\r\n            return { ...state, error: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Actions\r\n\r\nexport const getSessionAction = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: LOGIN,\r\n    });\r\n\r\n    getLoggedUser()\r\n        .then((user) => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: user,\r\n            });\r\n            setupFavoritesAction()(dispatch, getState);\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: LOGIN_ERROR,\r\n                payload: err.message,\r\n            });\r\n        });\r\n};\r\n\r\nexport const googleLoginAction = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: LOGIN,\r\n    });\r\n\r\n    loginWithGoogle()\r\n        .then((user) => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: user,\r\n            });\r\n            setupFavoritesAction()(dispatch, getState);\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: LOGIN_ERROR,\r\n                payload: err.message,\r\n            });\r\n        });\r\n};\r\n\r\nexport const logoutAction = () => (dispatch) => {\r\n    logout()\r\n        .then(() => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS,\r\n            });\r\n\r\n            cleanFavoritesAction()(dispatch);\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: LOGOUT_ERROR,\r\n                error: err.message,\r\n            });\r\n        });\r\n};\r\n","import React from 'react';\r\nimport styles from './login.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { googleLoginAction, logoutAction } from '../../redux/userDuck';\r\nimport Loader from '../Loader';\r\n\r\nfunction LoginPage({ fetching, loggedIn, googleLoginAction, logoutAction }) {\r\n    if (fetching) {\r\n        return <Loader />;\r\n    } else {\r\n        return (\r\n            <div className={styles.container}>\r\n                {loggedIn ? (\r\n                    <>\r\n                        <h1>Cierra tu sesión</h1>\r\n                        <button onClick={logoutAction}>Cerrar Sesión</button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <h1>Inicia Sesión con Google</h1>\r\n                        <button onClick={googleLoginAction}>Iniciar</button>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ user: { fetching, loggedIn } }) {\r\n    return {\r\n        fetching,\r\n        loggedIn,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { googleLoginAction, logoutAction })(\r\n    LoginPage\r\n);\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport Home from './components/home/HomePage';\r\nimport FavPage from './components/favs/FavPage';\r\nimport LoginPage from './components/login/LoginPage';\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Switch>\r\n            <PrivateRoute exact path=\"/\" component={Home} redirectTo=\"/login\" />\r\n            <PrivateRoute\r\n                path=\"/favs\"\r\n                component={FavPage}\r\n                redirectTo=\"/login\"\r\n            />\r\n            <Route path=\"/login\" component={LoginPage} />\r\n        </Switch>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { NavLink } from 'react-router-dom'\r\nimport Routes from './Routes';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <div className=\"nav-bar\">\r\n        <NavLink className=\"link\" activeClassName=\"active\" exact to=\"/\">\r\n          Inicio\r\n        </NavLink>\r\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/favs\">\r\n          Favoritos\r\n        </NavLink>\r\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/login\">\r\n          Login\r\n        </NavLink>\r\n      </div>\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport userReducer, { getSessionAction } from './userDuck';\r\nimport charsReducer, { fetchCharsAction } from './charsDuck';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst mainReducer = combineReducers({\r\n    user: userReducer,\r\n    chars: charsReducer,\r\n});\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n        : compose;\r\n\r\nconst storeConfig = [\r\n    mainReducer,\r\n    undefined,\r\n    composeEnhancers(applyMiddleware(thunk)),\r\n];\r\n\r\nexport default function genStore() {\r\n    const store = createStore(...storeConfig);\r\n\r\n    // Try to get a logged user\r\n    getSessionAction()(store.dispatch, store.getState);\r\n\r\n    // Setup characters\r\n    fetchCharsAction()(store.dispatch, store.getState);\r\n\r\n    return store;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport 'font-awesome/css/font-awesome.css';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport genStore from './redux/store';\r\n\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\n\r\nconst client = new ApolloClient({\r\n    uri: 'https://rickandmortyapi.com/graphql',\r\n});\r\n\r\nconst WithRouter = () => (\r\n    <BrowserRouter basename=\"/ReduxGraphQL\">\r\n        <App />\r\n    </BrowserRouter>\r\n);\r\n\r\nconst WithRedux = () => (\r\n    <Provider store={genStore()}>\r\n        <WithRouter />\r\n    </Provider>\r\n);\r\n\r\nconst WithApollo = () => (\r\n    <ApolloProvider client={client}>\r\n        <WithRedux />\r\n    </ApolloProvider>\r\n);\r\n\r\nReactDOM.render(<WithApollo />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}